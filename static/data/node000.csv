Heading,0,0,,,"node000"
Heading,1,1,,,"node100"
Heading,2,1,,,"The Pragmatic Programmer: 20th Anniversary Edition, 2nd Edition"
Heading,3,1,,,"1"
Note,4,1,,,"A Pragmatic Philosphy"
Note,5,1,,,"Qualities"
Note,5,2,,,"Seek out the bigger picture"
Note,5,3,,,"Imformed decisions"
Heading,3,2,,,"1.1 It's Your Life"
Note,4,1,,,"You can change your organization or you can change your organization"
Note,4,2,,,"Learn off the clock"
Note,4,3,,,"own up to our shortcomings"
Heading,3,3,,,"1.2"
Note,4,1,,,"The Cat Ate My Source Code"
Note,5,1,,,"Trust"
Note,5,2,,,"Responsibility is something you actively agree to."
Note,5,3,,,"Don't have control over every aspect"
Note,5,4,,,"Do your personal best"
Note,5,5,,,"Analyze for Risks"
Note,5,6,,,"Commitment"
Note,5,7,,,"You have the right to not to take responsibility for an impossible situation"
Note,5,8,,,"Don't Blame"
Note,5,9,,,"You shoudl expect to be held accountable for it"
Heading,3,4,,,"1.3"
Note,4,1,,,"Software Entropy"
Note,5,1,,,"Keep projects pristine"
Note,5,2,,,"Give"
Heading,3,5,,,"1.4"
Note,4,1,,,"Stone Sour and"
Heading,3,6,,,"1.5"
Note,4,1,,,"Good-Enough Software"
Heading,3,7,,,"1.6 Your Knowledge Porfolio"
Note,4,1,,,""
Heading,3,8,,,"1.7 Communicate"
Heading,1,2,,,"node200"
Heading,2,1,,,"The Pragmatic Programmer Quick Reference Guide"
Heading,3,1,,,"The Pragmatic Programmer Quick Reference Guide"
Note,4,1,,,"This page summarizes the tips and checklists found in The Pragmatic Programmer."
Note,4,2,,,"For more information about The Pragmatic Programmers LLC, source code for the examples, up-to-date pointers to Web resources, and an online bibiography, visit us at www.pragmaticprogrammer.com"
Note,5,1,,,"*  Care About Your Craft
Why spend your life developing software unless you care about doing it well?"
Note,5,2,,,"*  Think! About Your Work
Turn off the autopilot and take control. Constantly critique and appraise your work."
Note,5,3,,,"*  Provide Options, Don't Make Lame Excuses
Instead of excuses, provide options. Don't say it can't be done; explain what can be done."
Note,5,4,,,"*  Don't Live with Broken Windows
Fix bad designs, wrong decisions, and poor code when you see them."
Note,5,5,,,"*  Be a Catalyst for Change
You can't force change on people. Instead, show them how the future might be and help them participate in creating it."
Note,5,6,,,"*  Remember the Big Picture
Don't get so engrossed in the details that you forget to check what's happening around you."
Note,5,7,,,"*  Make Quality a Requirements Issue
Involve your users in determining the project's real quality requirements."
Note,5,8,,,"*  Invest Regularly in Your Knowledge Portfolio
Make learning a habit."
Note,5,9,,,"*  Critically Analyze What You Read and Hear
Don't be swayed by vendors, media hype, or dogma. Analyze information in terms of you and your project."
Note,5,10,,,"*  It's Both What You Say and the Way You Say It
There's no point in having great ideas if you don't communicate them effectively."
Note,5,11,,,"*  DRY–Don't Repeat Yourself
Every piece of knowledge must have a single, unambiguous, authoritative representation within a system."
Note,5,12,,,"*  Make It Easy to Reuse
If it's easy to reuse, people will. Create an environment that supports reuse."
Note,5,13,,,"*  Eliminate Effects Between Unrelated Things
Design components that are self-contained. independent, and have a single, well-defined purpose."
Note,5,14,,,"*  There Are No Final Decisions
No decision is cast in stone. Instead, consider each as being written in the sand at the beach, and plan for change."
Note,5,15,,,"*  Use Tracer Bullets to Find the Target
Tracer bullets let you home in on your target by trying things and seeing how close they land."
Note,5,16,,,"*  Prototype to Learn
Prototyping is a learning experience. Its value lies not in the code you produce, but in the lessons you learn."
Note,5,17,,,"*  Program Close to the Problem Domain
Design and code in your user's language."
Note,5,18,,,"*  Estimate to Avoid Surprises
Estimate before you start. You'll spot potential problems up front."
Note,5,19,,,"*  Iterate the Schedule with the Code
Use experience you gain as you implement to refine the project time scales."
Note,5,20,,,"*  Keep Knowledge in Plain Text
Plain text won't become obsolete. It helps leverage your work and simplifies debugging and testing."
Note,5,21,,,"*  Use the Power of Command Shells
Use the shell when graphical user interfaces don't cut it."
Note,5,22,,,"*  Use a Single Editor Well
The editor should be an extension of your hand; make sure your editor is configurable, extensible, and programmable."
Note,5,23,,,"*  Always Use Source Code Control
Source code control is a time machine for your work—you can go back."
Note,5,24,,,"*  Fix the Problem, Not the Blame
It doesn't really matter whether the bug is your fault or someone else's—it is still your problem, and it still needs to be fixed."
Note,5,25,,,"*  Don't Panic When Debugging
Take a deep breath and THINK! about what could be causing the bug."
Note,5,26,,,"*  select Isn't Broken.
It is rare to find a bug in the OS or the compiler, or even a third-party product or library. The bug is most likely in the application."
Note,5,27,,,"*  Don't Assume It—Prove It
Prove your assumptions in the actual environment-- with real data and boundary conditions."
Note,5,28,,,"*  Learn a Text Manipulation Language.
You spend a large part of each day working with text. Why not have the computer do some of it for you?"
Note,5,29,,,"*  Write Code That Writes Code
Code generators increase your productivity and help avoid duplication."
Note,5,30,,,"*  You Can't Write Perfect Software
Software can't be perfect. Protect your code and users from the inevitable errors."
Note,5,31,,,"*  Design with Contracts
Use contracts to document and verify that code does no more and no less than it claims to do."
Note,5,32,,,"*  Crash Early
A dead program normally does a lot less damage than a crippled one."
Note,5,33,,,"*  Use Assertions to Prevent the Impossible
Assertions validate your assumptions. Use them to protect your code from an uncertain world."
Note,5,34,,,"*  Use Exceptions for Exceptional Problems
Exceptions can suffer from all the readability and maintainability problems of classic spaghetti code. Reserve exceptions for exceptional things."
Note,5,35,,,"*  Finish What You Start
Where possible, the routine or object that allocates a resource should be responsible for deallocating it."
Note,5,36,,,"*  Minimize Coupling Between Modules
Avoid coupling by writing shy code and applying the Law of Demeter."
Note,5,37,,,"*  Configure, Don't Integrate
Implement technology choices for an application as configuration options, not through integration or engineering."
Note,5,38,,,"*  Put Abstractions in Code, Details in Metadata
Program for the general case, and put the specifics outside the compiled code base."
Note,5,39,,,"*  Analyze Workflow to Improve Concurrency
Exploit concurrency in your user's workflow."
Note,5,40,,,"*  Design Using Services
Design in terms of services—independent, concurrent objects behind well-defined, consistent interfaces."
Note,5,41,,,"*  Always Design for Concurrency
Allow for concurrency, and you'll design cleaner interfaces with fewer assumptions."
Note,5,42,,,"*  Separate Views from Models
Gain flexibility at low cost by designing your application in terms of models and views."
Note,5,43,,,"*  Use Blackboards to Coordinate Workflow
Use blackboards to coordinate disparate facts and agents, while maintaining independence and isolation among participants."
Note,5,44,,,"*  Don't Program by Coincidence
Rely only on reliable things. Beware of accidental complexity, and don't confuse a happy coincidence with a purposeful plan."
Note,5,45,,,"*  Estimate the Order of Your Algorithms
Get a feel for how long things are likely to take before you write code."
Note,5,46,,,"*  Test Your Estimates
Mathematical analysis of algorithms doesn't tell you everything. Try timing your code in its target environment."
Note,5,47,,,"*  Refactor Early, Refactor Often
Just as you might weed and rearrange a garden, rewrite, rework, and re-architect code when it needs it. Fix the root of the problem."
Note,5,48,,,"*  Design to Test
Start thinking about testing before you write a line of code."
Note,5,49,,,"*  Test Your Software, or Your Users Will
Test ruthlessly. Don't make your users find bugs for you."
Note,5,50,,,"*  Don't Use Wizard Code You Don't Understand
Wizards can generate reams of code. Make sure you understand all of it before you incorporate it into your project."
Note,5,51,,,"*  Don't Gather Requirements–Dig for Them
Requirements rarely lie on the surface. They're buried deep beneath layers of assumptions, misconceptions, and politics."
Note,5,52,,,"*  Workwith a User to Think Like a User
It's the best way to gain insight into how the system will really be used."
Note,5,53,,,"*  Abstractions Live Longer than Details
Invest in the abstraction, not the implementation. Abstractions can survive the barrage of changes from different implementations and new technologies."
Note,5,54,,,"*  Use a Project Glossary
Create and maintain a single source of all the specific terms and vocabulary for a project."
Note,5,55,,,"*  Don't Think Outside the Box–Find the Box
When faced with an impossible problem, identify the real constraints. Ask yourself: Does it have to be done this way? Does it have to be done at all?"
Note,5,56,,,"*  Start When You're Ready.
You've been building experience all your life. Don't ignore niggling doubts."
Note,5,57,,,"*  Some Things Are Better Done than Described
Don't fall into the specification spiral—at some point you need to start coding."
Note,5,58,,,"*  Don't Be a Slave to Formal Methods.
Don't blindly adopt any technique without putting it into the context of your development practices and capabilities."
Note,5,59,,,"*  Costly Tools Don't Produce Better Designs
Beware of vendor hype, industry dogma, and the aura of the price tag. Judge tools on their merits."
Note,5,60,,,"*  Organize Teams Around Functionality
Don't separate designers from coders, testers from data modelers. Build teams the way you build code."
Note,5,61,,,"*  Don't Use Manual Procedures
A shell script or batch file will execute the same instructions, in the same order, time after time."
Note,5,62,,,"*  Test Early. Test Often. Test Automatically
Tests that run with every build are much more effective than test plans that sit on a shelf."
Note,5,63,,,"*  Coding Ain't Done 'Til All the Tests Run
'Nuff said."
Note,5,64,,,"*  Use Saboteurs to Test Your Testing
Introduce bugs on purpose in a separate copy of the source to verify that testing will catch them."
Note,5,65,,,"*  Test State Coverage, Not Code Coverage
Identify and test significant program states. Just testing lines of code isn't enough."
Note,5,66,,,"*  Find Bugs Once
Once a human tester finds a bug, it should be the last time a human tester finds that bug. Automatic tests should check for it from then on."
Note,5,67,,,"*  English is Just a Programming Language
Write documents as you would write code: honor the DRY principle, use metadata, MVC, automatic generation, and so on."
Note,5,68,,,"*  Build Documentation In, Don't Bolt It On
Documentation created separately from code is less likely to be correct and up to date."
Note,5,69,,,"*  Gently Exceed Your Users' Expectations
Come to understand your users' expectations, then deliver just that little bit more."
Note,5,70,,,"*  Sign Your Work
Craftsmen of an earlier age were proud to sign their work. You should be, too."
Heading,3,2,,,"Languages To Learn"
Note,4,1,,,Tired of C C++ and Java? Try CLOS Dylan Eiffel Objective C Prolog Smalltalk or TOM. Each of these languages has different capabilities and a different flavor. Try a small project at home using one or more of them.
Heading,3,3,,,"The WISDOM Acrostic"
Note,4,1,,,"What do you want them to learn?
What is their interest in what you've got to say?
How sophisticated are they?
How much detail do they want?
Whom do you want to own the information?
How can you motivate them to listen to you?"
Heading,3,4,,,"How to Maintain Orthogonality"
Note,4,1,,,"*  Design independent, well-defined components."
Note,4,2,,,"*  Keep your code decoupled."
Note,4,3,,,"*  Avoid global data."
Note,4,4,,,"*  Refactor similar functions."
Heading,3,5,,,"Things to prototype"
Note,4,1,,,"*  Architecture"
Note,4,2,,,"*  New functionality in an existing system"
Note,4,3,,,"*  Structure or contents of external data"
Note,4,4,,,"*  Third-party tools or components"
Note,4,5,,,"*  Performance issues"
Note,4,6,,,"*  User interface design"
Heading,3,6,,,"Architectural Questions"
Note,4,1,,,"*  Are responsibilities well defined?"
Note,4,2,,,"*  Are the collaborations well defined?"
Note,4,3,,,"*  Is coupling minimized?"
Note,4,4,,,"*  Can you identify potential duplication?"
Note,4,5,,,"*  Are interface definitions and constraints acceptable?"
Note,4,6,,,"*  Can modules access needed data—when needed?"
Heading,3,7,,,"Debugging Checklist"
Note,4,1,,,"*  Is the problem being reported a direct result of the underlying bug, or merely a symptom?"
Note,4,2,,,"*  Is the bug really in the compiler? Is it in the OS? Or is it in your code?"
Note,4,3,,,"*  If you explained this problem in detail to a coworker, what would you say?"
Note,4,4,,,"*  If the suspect code passes its unit tests, are the tests complete enough? What happens if you run the unit test with this data?"
Note,4,5,,,"*  Do the conditions that caused this bug exist anywhere else in the system?"
Heading,3,8,,,"Law of Demeter for Functions"
Note,4,1,,,"An object's method should call only methods belonging to:"
Note,5,1,,,"*  Itself"
Note,5,2,,,"*  Any parameters passed in"
Note,5,3,,,"*  Objects it creates"
Note,5,4,,,"*  Component objects"
Heading,3,9,,,"How to Program Deliberately"
Note,4,1,,,"*  Stay aware of what you're doing."
Note,4,2,,,"*  Don't code blindfolded."
Note,4,3,,,"*  Proceed from a plan."
Note,4,4,,,"*  Rely only on reliable things."
Note,4,5,,,"*  Document your assumptions."
Note,4,6,,,"*  Test assumptions as well as code."
Note,4,7,,,"*  Prioritize your effort."
Note,4,8,,,"*  Don't be a slave to history."
Heading,3,10,,,"When to Refactor"
Note,4,1,,,"*  You discover a violation of the DRY principle."
Note,4,2,,,"*  You find things that could be more orthogonal."
Note,4,3,,,"*  Your knowledge improves."
Note,4,4,,,"*  The requirements evolve."
Note,4,5,,,"*  You need to improve performance."
Heading,3,11,,,"Cutting the Gordian Knot"
Note,4,1,,,"When solving impossible problems, ask yourself:"
Note,5,1,,,"*  Is there an easier way?"
Note,5,2,,,"*  Am I solving the right problem?"
Note,5,3,,,"*  Why is this a problem?"
Note,5,4,,,"*  What makes it hard?"
Note,5,5,,,"*  Do I have to do it this way?"
Note,5,6,,,"*  Does it have to be done at all?"
Heading,3,12,,,"Aspects of Testing"
Note,4,1,,,"*  Unit testing"
Note,4,2,,,"*  Integration testing"
Note,4,3,,,"*  Validation and verification"
Note,4,4,,,"*  Resource exhaustion, errors, and recovery"
Note,4,5,,,"*  Performance testing"
Note,4,6,,,"*  Usability testing"
Note,4,7,,,"*  Testing the tests themselves"
Note,4,8,,,"Checklists from The Pragmatic Programmer, by Andrew Hunt and David Thomas. Visit www.pragmaticprogrammer.com."
Note,4,9,,,"Copyright � 2000 by Addison Wesley Longman, Inc."
Heading,2,2,,,"https://github.com/HugoMatilla/The-Pragmatic-Programmer"
Heading,2,3,,,"TOC"
Heading,3,1,,,"*  Chapter 1. A Pragmatic Philosophy"
Note,4,1,,,"*  1.-The Cat Ate My Source Code"
Note,4,2,,,"*  2.-Software Entropy"
Note,4,3,,,"*  3.-Stone Soup and Boiled Frogs"
Note,4,4,,,"*  4.-Good enough soup"
Note,4,5,,,"*  5.-Your Knowledge Portfolio"
Note,4,6,,,"*  6.-Communicate"
Heading,3,2,,,"*  Chapter 2. A Pragmatic Approach"
Note,4,1,,,"*  7.-The Evils of Duplication"
Note,4,2,,,"*  8.-Orthogonality"
Note,4,3,,,"*  9.-Reversibility"
Note,4,4,,,"*  10-Tracer Bullets"
Note,4,5,,,"*  11.-Prototypes and Post-it Notes"
Note,4,6,,,"*  12.-Domain Languages"
Note,4,7,,,"*  13.-Estimating"
Heading,3,3,,,"*  Chapter 3. The Basic Tools"
Note,4,1,,,"*  14.-The Power of Plain Text"
Note,4,2,,,"*  15.-Shell Games"
Note,4,3,,,"*  16.-Power Editing"
Note,4,4,,,"*  17.-Source Code Control"
Note,4,5,,,"*  18.-Debugging"
Note,4,6,,,"*  19.-Text Manipulation"
Note,4,7,,,"*  20.-Code Generators"
Heading,3,4,,,"*  Chapter 4. A Pragmatic Paranoia"
Note,4,1,,,"*  21.-Design by Contract"
Note,4,2,,,"*  22.-Dead Programs Tell No Lies"
Note,4,3,,,"*  23.-Assertive Programming"
Note,4,4,,,"*  24.-When to Use Exceptions"
Note,4,5,,,"*  25.-How to Balance Resources"
Heading,3,5,,,"*  Chapter 5. Bend or Break"
Note,4,1,,,"*  26.-Decoupling and the Law of Demeter"
Note,4,2,,,"*  27.-Metaprogramming"
Note,4,3,,,"*  28.- Temporal Coupling"
Note,4,4,,,"*  29.-It's Just a View"
Note,4,5,,,"*  30.-Blackboards"
Heading,3,6,,,"*  Chapter 6. While you are coding"
Note,4,1,,,"*  31.-Program by Coincidence"
Note,4,2,,,"*  32.-Algorithm Speed"
Note,4,3,,,"*  33.-Refactoring"
Note,4,4,,,"*  34.-Code That's Easy to Test"
Note,4,5,,,"*  35.-Evil Wizards"
Heading,3,7,,,"*  Chapter 7. Before the project"
Note,4,1,,,"*  36.-The Requirements Pit"
Note,4,2,,,"*  37.-Solving Impossible Puzzles"
Note,4,3,,,"*  38.-Not Until You're Ready"
Note,4,4,,,"*  39.-The Specification Trap"
Note,4,5,,,"*  40.-Circles and Arrows"
Heading,3,8,,,"*  Chapter 8. Pragmatic Projects"
Note,4,1,,,"*  41.-Pragmatic Teams"
Note,4,2,,,"*  42.-Ubiquitous Automation"
Note,4,3,,,"*  43.-Ruthless testing"
Note,4,4,,,"*  44.-It's All Writing"
Note,4,5,,,"*  45.- Great Expectations"
